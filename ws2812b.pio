.program ws2812b

; Drive a WS2812B individually addressable LED strip

entry:
    SET PINS, 0 ; Set all pins low and wait for the rest window (force reset)

load_command:
    ; Pull data from the c++ program and decide if this is a color 
    ; to send or a reset
    PULL
    OUT X, 8
    JMP !X send_color
    
send_reset:
    NOP [1]  ; It takes 2 extra cycles for show color to start
    SET PINS, 0 [6]
    JMP load_command

send_next_color:
    NOP [3] ; It takes 4 extra cycles to regularize next color and next command

send_color:
    ; Move 1 bit to send to X and jump to the high or low pattern segment
    OUT Y, 1
    JMP !Y send_0

send_1:
    SET PINS, 1 [19] ; send high for 20 ticks
    SET PINS, 0 [3] ; send low for 11 ticks (1 + 3 delay + 7 ticks til next action)
    JMP !OSRE send_next_color
    JMP load_command

send_0:
    SET PINS, 1 [9] ; send high for 10 ticks
    SET PINS, 0 [13]  ; send low for 21 ticks (1 + 13 delay + 7 ticks til next action)
    JMP !OSRE send_next_color
    JMP load_command


% c-sdk {
static inline pio_sm_config ws2812b_program_init(PIO pio, uint sm, uint offset, uint pin, float clkdiv) {
    pio_sm_config c = ws2812b_program_get_default_config(offset);

    // Map the state machine's i/o pin groups to one pin, namely the `pin`
    sm_config_set_in_pins(&c, pin);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_jmp_pin(&c, pin);

    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, false, false, 32);
    
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    sm_config_set_clkdiv(&c, clkdiv);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
    return c;
}
%}
